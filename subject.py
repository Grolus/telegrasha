import os
import json
from typing import Sequence 

HW_STORAGE_PATH = 'data/homework/'


class Subject():
    def __init__(self, name_ru: str, weekdays: list | tuple[list], aliases: list[str], name_eng: str):
        self.name_ru = name_ru
        self.name_eng = name_eng
        self.aliases = aliases
        self.weekdays = weekdays
        self.is_grouped = isinstance(weekdays, tuple)
    def load(self, week, weekday, group: int=''):
        try:
            with open(f'{HW_STORAGE_PATH}{week}/{weekday}/{self.name_eng}{group if group else ""}.json', 'r') as file:
                loaded = json.load(file)
                return Homework(SUBJECTS_ENGNAME_DICT[loaded['subject_name']], loaded['text'], loaded['sender'], loaded['attachments'])
        except:
            return False


ALL_SUBJECTS = (
        Subject('–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', [1, 2, 3, 4], ['—Ä—É—Å'], 'russian'),
        Subject('–§–∏–∑–∏–∫–∞', [0, 2, 4], ['—Ñ–∏–∑–∏–∫'], 'physics'),
        Subject('–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', [2, 4], ['–ª–∏—Ç—Ä–µ', '–ª–∏—Ç–µ—Ä'], 'literature'),
        Subject('–ê–ª–≥–µ–±—Ä–∞', [0, 1, 2], ['–∞–ª–≥–µ–±', '–º–∞—Ç–∞–Ω', '–º–∞—Ç–µ–º', '–º–∞—Ç–µ—à'], 'algebra'),
        Subject('–ì–µ–æ–º–µ—Ç—Ä–∏—è', [3], ['–≥–µ–æ–º'], 'geometry'),
        Subject('–•–∏–º–∏—è', [1, 4], ['—Ö–∏–º'], 'chemistry'),
        Subject('–ë–∏–æ–ª–æ–≥–∏—è', [2, 3], ['–±–∏–æ–ª'], 'biology'),
        Subject('–ò—Å—Ç–æ—Ä–∏—è', [0, 3], ['–∏—Å—Ç–æ—Ä'], 'history'),
        Subject('–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', [1], ['–æ–±—â–µ—Å—Ç–≤'], 'socienty'),
        Subject('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', ([1, 2], [0, 1]), ['–∞–Ω–≥–ª', '–∏–Ω–≥–ª–∏—à', '–∏–Ω —è–∑', '–∏–Ω—è–∑'], 'english'),
        Subject('–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', [0, 4], ['–≥–µ–æ–≥—Ä'], 'geography'),
        Subject('–ò–ö–¢', ([0], [2]), ['–∏–∫—Ç', '–∏–Ω—Ñ'], 'informatics'),
        Subject('–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫', [0], ['–Ω–µ–º–µ—Ü', '–Ω–µ–º—Ü'], 'german'),
        Subject('–û–ë–ñ', [4], ['–æ–±–∂'], 'obzh'),
        Subject('–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞', [2, 3], ['—Ñ–∏–∑—Ä', '—Ñ–∏–∑–∫—É–ª—å—Ç'], 'physculture'),
        Subject('–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å', [0], ['–∫–ª —á–∞—Å', '–∫–ª–∞—Å—Å–Ω—ã–π —á–∞—Å', '–∫–ª–∞—Å–Ω—ã–π —á–∞—Å'], 'class_hour'),
        Subject('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è', [3], ['—Ç–µ—Ö–Ω–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏', '—Ç–µ—Ö–Ω–µ'], 'technology'),
        Subject('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', [4], ['–ø—Ä–æ–µ–∫—Ç', '–ø—Ä–æ—ç–∫—Ç'], 'projects'),
        #Subject('–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ', [0], ['–Ω–∏—á–µ–≥–æ', '–æ—Ç—Å—É—Ç—Å—Ç–≤'], 'nothing')
    )

SUBJECTS_ENGNAME_DICT = {s.name_eng : s for s in ALL_SUBJECTS}
SUBJECTS_RUNAME_DICT = {s.name_ru : s for s in ALL_SUBJECTS}
GROOPED_SUBJECTS = [s for s in ALL_SUBJECTS if s.is_grouped]
ALL_SUBJECT_ALIASES = []
SUBJECTS_FROM_ALIASES_DICT = {}
for s in ALL_SUBJECTS:
    ALL_SUBJECT_ALIASES.extend(s.aliases)
    SUBJECTS_FROM_ALIASES_DICT.update({al : s for al in s.aliases})

def is_subject_in(text: str): 
    return any([i in text for i in ALL_SUBJECT_ALIASES])

class Homework():
    def __init__(self, subject: Subject, text: str, sender: str, attachment: str=''):
        self.subject = subject
        self.text = text
        self.sender = sender
        self.attachment = attachment
        
    def save(self, week, weekday, group=''):
        if str(week) not in os.listdir(HW_STORAGE_PATH):
            os.mkdir(f'{HW_STORAGE_PATH}{week}')
        if str(weekday) not in os.listdir(f'{HW_STORAGE_PATH}{week}'):
            os.mkdir(f'{HW_STORAGE_PATH}{week}/{weekday}')
        with open(f'{HW_STORAGE_PATH}{week}/{weekday}/{self.subject.name_eng}{group if group else ""}.json', 'w') as file:
            _dict = {'subject_name': self.subject.name_eng, 'text': self.text, 'sender': self.sender, 'attachments': self.attachment}
            json.dump(_dict, file)
        return True

def _subject_identify(obj: Subject | str | Sequence) -> Subject | tuple[Subject]:
    if isinstance(obj, Subject):
        return obj
    elif subject := SUBJECTS_ENGNAME_DICT.get(obj):
        return subject
    elif subject := SUBJECTS_RUNAME_DICT.get(obj):
        return subject
    elif isinstance(obj, Sequence):
         return tuple(_subject_identify(s) for s in obj)
    raise ValueError(f'All of subjects must me Subject instance or valid subject name (error: {obj})')

def subject_to_hw_send_line(subject: Subject, week: int, weekday: int, group: int=0):
    raw_line = f'{subject.name_ru}{f" [{group}] –≥—Ä—É–ø–ø–∞" if group else ""}'
    if hw := subject.load(week, weekday, str(group) if group else ''):
        line = f'‚úÖ{raw_line}{f" (c –≤–ª–æ–∂–µ–Ω–∏–µ–ºüß©)" if hw.attachment else ""}: {hw.text}'
    else:
        line = f'‚ùå{raw_line} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    return line


class Timetable():
    def __init__(self, weekday: int, *subjects: Subject | str):
        self.weekday = weekday
        self.subjects = []
        for s in subjects:
            self.subjects.append(_subject_identify(s))
        #print(f'Registered timetable:\n    {", ".join([s.name_ru if isinstance(s, Subject) else f"{s[0].name_ru}/{s[1].name_ru}" for s in self.subjects])}')

ALL_TIMETABLES = (
    Timetable(0, '–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫', '–ê–ª–≥–µ–±—Ä–∞', '–§–∏–∑–∏–∫–∞', ('–ò–ö–¢', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫')),
    Timetable(1, 'algebra', ('english', 'english'), 'chemistry', 'socienty', 'russian', 'algebra'),
    Timetable(2, 'biology', 'algebra', 'physics', 'russian', 'physculture', 'literature', ('english', 'informatics')),
    Timetable(3, 'biology', 'history', 'geometry', 'technology', 'geometry', 'physculture', 'russian'),
    Timetable(4, 'geography', 'projects', 'obzh', 'chemistry', 'russian', 'literature')
)



